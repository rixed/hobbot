@! vim:sw=4 ts=4 sts=4 expandtab spell spelllang=en
@p maximum_input_line_length = 999999
@p maximum_output_line_length = 999999

@B@<BookMaker@>

Engineers like to gamble, probably because showing your confidence with
a bet is a good replacement for an argument. But these bets are easily
forgotten, which is a pity since we like to bet free beers.

What we need is an impartial IRC bot to record the challenges, the predicted
outcomes and each person stake. Let's formalize it. Given an event E which will
have a future (numeric) result e (for non numeric events e may identify a
non numeric result). Then, bets are relations of the form:

Set of nicks a will owe x to set of nicks b if f(e) is false, and the other way
around otherwise.

Most of the time, the set of gambling nicks will be reduced to just one nick
but there is no reason to refuse collective debts/gains. Compensations between
the debts should be possible but optional (again, to maximize beer consumption).

Typically, we will have many such relations on E, so that when e is finally known
we have many new debts to record.

So the bot must be able to:

- record a new gamble (with a short name and a longer description)

@$@<NewGamblingTypes@>+=@{@-
type t = { date : float ;
           name : string ;
    description : string ;
mutable outcome : outcome option ;
   mutable bets : bet list }
and outcome = int
@}

@$@<NewGambling@>==@{@-
module Gamble = struct
    @<NewGamblingTypes@>

    let make name description =
        { date = Unix.time () ;
          outcome = None ; bets = [] ;
          name ; description }

    @<NewOutcome@>
    @<NewBet@>
end
@}

- record a new bet (two sets of nicks and what's at stake - quantity and quality -
  subject to what provision)

@$@<NewGamblingTypes@>+=@{@-
and bet = { payer : string list ; (* 'payer' pay 'payee' if condition is false *)
            payee : string list ;
        condition : range ;
             what : string ;
              qtt : int }
and range = { min : int option ;
              max : int option }
@}

@$@<NewBet@>+=@{@-
    let make_range ?min ?max () = { min ; max }
    let make_bet gamble ?min ?max payer payee what qtt =
        let bet =
            { condition = make_range ?min ?max () ;
              payer = nicks_sort payer ;
              payee = nicks_sort payee ;
              what ; qtt } in
        gamble.bets <- bet :: gamble.bets
@}

With a few accompagnying functions:

@$@<NewBet@>+=@{@-
let string_of_bound = function
    | None -> ""
    | Some x -> string_of_int x
@}

Given these structures, a bet wins (ie. the payer does *not* pay the payee)
when the outcome make the condition of the bet true. In other words, the payer
win:

@$@<NewBet@>+=@{@-
    let wins bet outcome =
        Option.map_default (fun min -> outcome >= min) true bet.condition.min &&
        Option.map_default (fun max -> outcome <  max) true bet.condition.max
@}

Notice that we sort all list of nicks so that we can later use generic comparison operators
on these lists as they were string sets instead:

@$@<NicksSort@>==@{@-
let nicks_sort = List.sort String.compare
@}

- record the outcome of an event

@$@<NewOutcome@>==@{@-
let set_outcome gamble outcome = gamble.outcome <- Some outcome
@}

- record what was already paid for (again, two sets of nicks and what was traded)

@$@<NewClear@>==@{@-
module Payment = struct
    type t = { date : float ;
              payer : string list ;
              payee : string list ;
               what : string ;
                qtt : int }

    let make payer payee what qtt =
        { date = Unix.time () ;
          payer = nicks_sort payer ;
          payee = nicks_sort payee ;
          what ; qtt }
end
@}

We do not have to keep a running account of each nick debts since we can
compute from this the current situation of every involved nick; although
history compression will still be possible (under the form "nicks a owe x to
nicks b from previous gamblings").

The functions we need to be able to perform on our database of records are: to
add a gamble, to find a gamble by name, to list pending gambles (those with no
outcome yet) so that users can place new bets, to place a bet on a pending
gamble, to list current pending debts and to record (and check) a new refund.

Later, we may want to be also able to compute any nick account, compute a nick
credibility (out of previous wins and losses).

From these requirements, we want a hash for the gamble (indexed by name),
and for each gamble a list of bets. Aside from that, we also keep record of
all refunds. Everything is stored in a single @{database@} record so that
it's easier to (un)marshal.

Also, in order not to repeat the gamble name in almost every command, we will
have a current, "on topic", gamble. This topic should be automatically set to
last mentioned gamble name.

@$@<Database@>+=@{@-
type database = { gambles : (string, Gamble.t) Hashtbl.t ;
          mutable refunds : Payment.t list ;
          mutable current : Gamble.t option }

let make_empty_database () =
    { gambles = Hashtbl.create 11 ;
      refunds = [] ;
      current = None }

let db_file = "gambles.db"

let database =
    try File.with_file_in db_file Marshal.input
    with Sys_error _ -> make_empty_database ()
@}

With these data structures in place our required functions are trivial:

@$@<Database@>+=@{
let set_current g = database.current <- Some g

let add_gamble name descr =
    let gamble = Gamble.make name descr in
    Hashtbl.add database.gambles name gamble ;
    set_current gamble

let find_gamble g = Hashtbl.find_option database.gambles g

let pending_gambles () =
    Hashtbl.fold (fun _name gamble lst ->
        if gamble.Gamble.outcome = None then gamble::lst else lst)
        database.gambles []

let pending_debts compensate =
    (* list of all debts *)
    let debts = Hashtbl.create 11 in (* hash of (payer*payee)->qtt list of due quantities indexed on what is due *)
    let rec owe compensate what qtt payer payee =
        if compensate && payer > payee then (
            owe false what (-qtt) payee payer
        ) else (
            Hashtbl.modify_opt what (function
                | None ->
                    let h = Hashtbl.create 7 in
                    Hashtbl.add h (payer,payee) qtt ;
                    Some h
                | Some dues as x ->
                    Hashtbl.modify_opt (payer,payee) (function
                        | None -> Some qtt
                        | Some qtt' -> Some (qtt+qtt'))
                        dues ;
                    x)
                debts
        ) in
    Hashtbl.iter (fun _name gamble ->
        let open Gamble in
        Option.may (fun outcome ->
            List.iter (fun bet ->
                if wins bet outcome then (* payer win its bet against payee *)
                    owe compensate bet.what bet.qtt bet.payee bet.payer
                else
                    owe compensate bet.what bet.qtt bet.payer bet.payee)
                gamble.bets)
            gamble.outcome)
        database.gambles ;
    (* Now compensate these debits with the refunds *)
    List.iter (fun pay ->
        let open Payment in
        owe true pay.what pay.qtt pay.payee pay.payer)
        database.refunds ;
    (* build a list of debts *)
    Hashtbl.fold (fun what dues lst ->
        Hashtbl.fold (fun (payer,payee) qtt lst ->
            if qtt = 0 then lst else
            (what,qtt,payer,payee) :: lst)
            dues lst)
        debts []

let pay payer payee what qtt =
    (* check it corresponds to a debts *)
    let debts = pending_debts false in
    (* we accept any qtt smaller than total owed *)
    let owed_qtt =
        List.fold_left (fun owed (what',qtt',payer',payee') ->
            if what = what' && payer = payer' && payee = payee' then
                owed + qtt'
            else owed)
            0 debts in
    if owed_qtt < qtt then
        failwith ("amount of "^ what ^" actually owed: "^ string_of_int owed_qtt) ;
    (* All is well, place the refund *)
    let refund = Payment.make payer payee what qtt in
    database.refunds <- refund :: database.refunds
@}

Let's now use them to implement the bot itself, starting with a few
definition and utilities:

@$@<Gambling@>+=@{@-
let nicks_print fmt lst =
    List.print String.print fmt lst

let help = "See my internals at https://github.com/rixed/hobbot"

let string_of_ts f =
    let open Unix in
    let tm = localtime f in
    Printf.sprintf "%04d-%02d-%02d" (tm.tm_year+1900) (tm.tm_mon+1) tm.tm_mday
@}

Then the main piece of code, the function that react to incoming orders:

@$@<Gambling@>+=@{@-
let on_msg_to_bookmaker ~priv state src dst msg =
    let open Str in
    if priv then Api.react_to_msg state msg [
        regexp "^help$", (fun () ->
            Irc.tell state.write [dst] help) ;
        regexp "^\\(.*\\bcompens.+ +\\)?\\(accounts\\|debts\\)\\( +.*\\bcompens.*\\)?$", (fun () ->
            let found_group n =
                try ignore (group_beginning n) ; true
                with Not_found -> false in
            let compensate = found_group 1 || found_group 3 in
            let say_debt (what,qtt,payer,payee) =
                let os = IO.output_string () in
                Printf.fprintf os "%a owe %d %s to %a"
                    nicks_print payer
                    qtt what
                    nicks_print payee ;
                IO.close_out os |>
                Irc.tell state.write [dst] in
            match pending_debts compensate with
            | []  -> Irc.tell state.write [dst] "Good accounts make good friends"
            | lst -> List.iter say_debt lst) ;
        regexp "^pendings?", (fun () ->
            let say_gamble g =
                let open Gamble in
                Printf.sprintf "[%s] %s (%s)"
                    g.name g.description (string_of_ts g.date) |>
                Irc.tell state.write [dst] in
            match pending_gambles () with
            | []  -> Irc.tell state.write [dst] "No pending gambles"
            | lst -> List.iter say_gamble lst) ;
        regexp "^\\(about\\|bet +on\\|topic\\) +\\(.*\\)$", (fun () ->
            let name = matched_group 2 msg in
            (match find_gamble name with
            | None -> "What's that?"
            | Some g when g.Gamble.outcome <> None ->
                "This gamble is already settle"
            | Some g ->
                set_current g ;
                "Let's talk about "^g.Gamble.name^" ("^g.Gamble.description^")") |>
            Irc.tell state.write [dst]) ;
        regexp "^gamble +\\([^ ]+\\)\\( +\\(.*\\)\\)?", (fun () ->
            let name = matched_group 1 msg
            and descr = try matched_group 3 msg with Not_found -> "" in
            add_gamble name descr ;
            Irc.tell state.write [dst] ("Accepting bets for "^name)) ;
        regexp "^bet +\\([0-9]+\\) +\\(.*[^s]\\)s? +with +\\([^ ]+\\) +on +\\(-?[0-9]+\\)?\\.\\.\\(-?[0-9]+\\)?$", (fun () ->
            let qtt = matched_group 1 msg |> int_of_string
            and what = matched_group 2 msg
            and payee = matched_group 3 msg |> String.nsplit ~by:","
            and min = try Some (matched_group 4 msg |> int_of_string) with Not_found -> None
            and max = try Some (matched_group 5 msg |> int_of_string) with Not_found -> None in
            match database.current with
            | None -> Irc.tell state.write [dst] "What are we gambling on?"
            | Some g ->
                let open Gamble in
                (match g.outcome with
                | None ->
                    (* Can place new bets *)
                    make_bet g ?min ?max [src] payee what qtt ;
                    Printf.sprintf "%s will pay %d %s to %s if outcome of %s is not within %s..%s"
                        src qtt what (matched_group 3 msg) g.name
                        (string_of_bound min) (string_of_bound max) |>
                    Irc.tell state.write [dst]
                | Some outcome ->
                    Printf.sprintf "We already know %s outcome (%d)"
                        g.name outcome |>
                    Irc.tell state.write [dst])) ;
        regexp "^\\(outcome\\|result\\)[^0-9-]*\\(-?[0-9]+\\)$", (fun () ->
            match database.current with
            | None -> Irc.tell state.write [dst] "What were we gambling on?"
            | Some g ->
                (match g.Gamble.outcome with
                | None ->
                    let outcome = matched_group 2 msg |> int_of_string in
                    Gamble.set_outcome g outcome ;
                    Irc.tell state.write [dst] "Ok"
                | Some outcome ->
                    Printf.sprintf "Outcome of %s is already known (%d)"
                        g.Gamble.name outcome |>
                    Irc.tell state.write [dst])) ;
        regexp "^\\([^ ]+\\)?\\(pay\\|refund\\)\\(ed\\)? +\\([0-9]+\\) +\\(.*[^s]\\)s? +to +\\([^ ]+\\)$", (fun () ->
            let payer = try matched_group 1 msg |> String.nsplit ~by:","
                        with Not_found -> [src]
            and qtt   = matched_group 4 msg |> int_of_string
            and what  = matched_group 5 msg
            and payee = matched_group 6 msg |> String.nsplit ~by:"," in
            try pay payer payee what qtt ;
                Irc.tell state.write [dst] "Ok"
            with Failure str ->
                Irc.tell state.write [dst] ("Cant do that: "^str)) ;
        regexp "", (fun () -> Irc.tell state.write [dst] "Are you talking to me?!") ] ;
@}

Beware! Regular expressions spotted! Get your tests ready:

@$@<Gambling@>+=@{@-
(*$R on_msg_to_bookmaker
    let open Event.TcpClient in
    let mock_buffer = Buffer.create 0 in
    let mock_state () =
        let state = Api.make_empty_state () in
        state.Api.write <- Buffer.add_string mock_buffer ;
        state in
    let state = mock_state () in
    let actual_out ?(src="") msg_in =
        on_msg_to_bookmaker ~priv:true state src "#somechan" msg_in ;
        let actual_out =
            try Buffer.contents mock_buffer |>
                String.split ~by:":" |> snd |>
                String.trim
            with Not_found -> "No answer!?" in
        Buffer.clear mock_buffer ;
        actual_out in
    let test ?src msg_in msg_out =
        assert_equal ~printer:identity ~msg:(msg_in^"->"^msg_out)
            msg_out (actual_out ?src msg_in) in
    let check ?src msg_in f =
        let actual_out = actual_out ?src msg_in in
        assert_bool ("Bad output: '"^actual_out^"'") (f actual_out) in
    let starts_with ?src msg_in start =
        check ?src msg_in ((flip String.starts_with) start) in
    (* Check we answer help *)
    test "help" help ;
    (* At first every accounts are clear *)
    test "accounts" "Good accounts make good friends" ;
    test "accounts with compensations" "Good accounts make good friends" ;
    test "compensated accounts" "Good accounts make good friends" ;
    (* And there are no pending gambles *)
    test "pendings" "No pending gambles" ;
    (* Let's start *)
    test "gamble FasterLanguage Ocaml code runs n% faster than Go" "Accepting bets for FasterLanguage" ;
    starts_with "pendings" "[FasterLanguage] Ocaml code" ;
    (* And place some bets *)
    starts_with ~src:"rixed" "bet 1 beer with jim on 50.." "rixed will pay 1 beer to jim" ;
    starts_with ~src:"joe"   "bet 2 beers with rixed on ..-1" "joe will pay 2 beer" ;
    (* Set outcome *)
    test "outcome 100" "Ok" ;
    test ~src:"jim" "payed 1 beer to rixed" "Ok" ;
    test ~src:"joe" "payed 1 beer to rixed" "Ok" ;
    test "accounts" "[joe] owe 1 beer to [rixed]" ;
    test ~src:"joe" "payed 1 beer to rixed" "Ok" ;
    test "accounts" "Good accounts make good friends"
*)
@}

Notice that we haven't saved the database at any point yet. We must avoid
saving it while testing @{on_msg_to_bookmaker@}, so that's why we wrap this
function into another one that will save the database after each command
(better too much savings than forgiving one), and will pass this wrapper to
@{start@} instead:

@$@<Database@>+=@{@-
let save_database () =
    File.with_file_out db_file (fun oc ->
        Marshal.output oc database)

let with_save f x =
    finally save_database
        f x ;
@}

We have to take care to split the initialization of the bot (which connects
to IRC server as a side effect) from the rest of its code (that we regroup in
the @{Bookmaker_lib@} module, so that we can build a test program with the
bot functions that does not connect anywhere!

@O@<bookmaker_lib.ml@>==@{@-
open Batteries

@<NicksSort@>
@<NewGambling@>
@<NewClear@>
@<Database@>

open Api
@<Gambling@>
@}

Time to conclude this bot that's too long already with almost the same @{init@}
function than the @{loader@} bot:

@O@<bookmaker.ml@>==@{@-
open Bookmaker_lib
open Api

let init =
    let on_msg ~priv state src dst msg =
        with_save (on_msg_to_bookmaker ~priv state src dst) msg in
    start ~servername:!servername
          ~servicename:!servicename
          ~nick:(!nick ^"-bookmaker")
          !channels on_msg
@}
