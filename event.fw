@! vim:sw=4 ts=4 sts=4 expandtab spell spelllang=en
@p maximum_input_line_length = 999999
@p maximum_output_line_length = 999999
@A@<The Event Loop@>
@B@<General Principles@>

Despite an IRC bot working generally with only one socket (the connection
to the IRC server), we'd like our to be able to connect to various places
(SQL databases, other network services...) That is why we insist on basing
our program on an event loop.

The traditional UNIX event loop is designed around a call to @{select@},
which wait for a given set of file descriptors to be ready for reading
and/or writing. As everything tends to be a file in UNIX, you can easily
arrange for any event source/sink to be files, and then @{select@} the
next file on which you can act, perform the action, and repeat.

Problems with the @{select@} loop:

- some event sources/sinks are not files and thus can not be selected ; for
  instance: signals, condition variables...

- you may not be able to read a while message from a readable file; if that's
  the case you will have to buffer what have just been read until the rest of
  the message is received, since you cannot unread (it would make the file
  readable again yet no more content is available);

- conversely, you may not be able to write a full message to a writable file;
  again, you'd have to buffer what you could no write;

- you loose all memory between messages, thus must generally lookup some huge
  data structure to find out what's the context for an incoming message (for
  instance, what was the state of communication with this given remote client
  or server);

- one select loop makes use of only one execution core.


All of these problems are elegantly solved by threads, but threads have issues
as well:

- a thread might be preempted at any place which make necessary to use some
  kind of synchronisation (such as mutexes) which most often than not have
  terrible consequences on maintainability;

- thread stacks contain typically more information than the bare required
  "contexts", thus requiring more memory;

- a program with many threads is harder to instrument/debug;

- incidentally, OCaml runtime (as of today) makes it hard to use several
  execution cores anyway.

In our case (as in most cases) no approach is intrinsically better. I've chosen
to go the @{select@} route because it better suits my mood.

@B@<How to get there in OCaml@>

The reader is supposed to be moderately familiar with system programming and OCaml.
By the way, there is a good tutorial on this very topic that's a good read:

http://ocamlunix.forge.ocamlcore.org/

Which is a translation of this original document in french:

http://cristal.inria.fr/~remy/poly/system/camlunix/index.html

You will see that all traditional UNIX system calls dealing with I/O are readily
available in stock OCaml, only simpler.

In C, the general pattern with the @{select@} loop goes as follow:

First you hand a pair of initially empty sets of file descriptors over all your
event sources so that they have a chance to add their file descriptor of
interest in it (some may want to monitor several file descriptors, as is
typically the case for a TCP server for instance, which wants to wait for new
connection as well as anything to read from already connected clients). Then you
wait into @{select@} than something happen to one of these files, and finally you
return the resulting sets of modified files to each event handlers to check and
take good care of. Notice that each event handler must lookup its own files into
the resulting set which stores changed files descriptors of all event handlers.

OCaml standard library try to make this easier by using lists of file
descriptors instead of @{FD_SET@}s. This makes the first part of this loop
(collecting monitored file descriptors) easier at the expense of making the
second part (dispatching the result set to event handlers) very ineffective
since event handlers will have to check if its file descriptors are present in
a list. Performance is not an issue here but it's still interesting to notice
how, contrary to what one might expect, a more strictly typed language than C,
such as OCaml, happen to use too broad types in some places.

So we need two functions for each event handler: one that return the lists of
file descriptors to monitor (but to avoid merging lists we will rather pass the
lists to be completed), and one that accept the lists of readable and writable
file descriptors and act on it. This function also takes the handler structure
itself as first argument (not unlike a 'self' method argument); we do so in order
to be able to unregister this handler, should the processing function decides to
do so (when reading enf of file for instance).

Notice that @{monitored_files@} is composed of three lists: we keep carrying
around the third set of file descriptors (the one for exceptional conditions)
despite we won't use it (exceptional conditions are largely useless).

@$@<EventHandler@>==@{@-
type fd = Unix.file_descr

type monitored_files = fd list (* readables *)
                     * fd list (* writables *)
                     * fd list (* exceptional conditions *)

type handler = { register_files : monitored_files -> monitored_files ;
                  process_files : handler -> monitored_files -> unit }
@}

So that given the list @{handlers@} of such handlers the select loop body is rather short:

@$@<SelectLoopBody@>==@{@-
let select_once handlers =
    let collect_all_monitored_files handlers =
        List.fold_left (fun files handler ->
            handler.register_files files)
            ([],[],[]) handlers
    and process_all_monitored_files handlers files =
        List.iter (fun handler -> handler.process_files handler files) handlers in

    let open Unix in
    let rfiles, wfiles, efiles = collect_all_monitored_files handlers in
    try let changed_files = select rfiles wfiles efiles (-1.) in
        process_all_monitored_files handlers changed_files
    with
        @<HandleSelectErrors@>
@}

The only error of interrest being:

@$@<HandleSelectErrors@>==@{@-
| Unix_error (EINTR,_,_) -> ()
@}

Such that the select loop itself reduces to:

@$@<SelectLoop@>+=@{@-
@<SelectLoopBody@>

let handlers = ref []

let loop () =
    Log.debug "Entering event loop" ;
    while !handlers != [] do
        select_once !handlers
    done
@}

You might be wondering why we use a global mutable list for the handlers.
This is to allow an event handler to removes itself from the list of
active handlers, or to register new event handlers, using these helper
functions:

@$@<SelectLoop@>+=@{@-
let register handler =
    handlers := handler :: !handlers

let unregister handler =
    handlers := List.filter ((!=) handler) !handlers
@}

Note that we use physical equality to @{unregister@} an handler.  The event
handler that wish to be able to unregister itself must then take care of
keeping a grip on itself.

@B@<Buffered reads/writes@>

Many of our event handlers (TCP client, coprocess...) will need to be able to
read/write lines from a file descriptor that can not accept/deliver a full line,
thus the need for buffering. Here we are going to implement a simple buffering
mechanism.

From two file descriptors, one for writing and another one for reading (might be
twice the same, for a TCP client for instance) and a line reader function,
we will register the corresponding event handler and return a write function,
associating a buffer to each of the file descriptors:

@$@<MakeBufferedIO@>==@{@-
let start infd outfd line_cb =
    let inbuf = Buffer.create 500
    and outbuf = Buffer.create 500 in
    let register_files (rfiles, wfiles, efiles) =
        let buffer_is_empty b = Buffer.length b = 0 in
        infd :: rfiles,
        (if buffer_is_empty outbuf then wfiles else outfd :: wfiles),
        efiles in
    let process_files handler (rfiles, wfiles, _) =
        if List.mem infd rfiles then
            try_read_line infd inbuf line_cb handler ;
        if List.mem outfd wfiles then
            try_write_buf outbuf outfd in
    register { register_files ; process_files } ;
    Buffer.add_string outbuf
@}

Notice how simple the write function is (merely @{Buffer.add_string outbuf@}
that append the given string at the end of the output buffer. We want select to
monitor the output file descriptor @{outfd@} whenever this @{outbuf@} is not
empty, and then we react to this file readiness to be written by merely writing
as much as we can for @{outbuf@}:

@$@<WriteBuf@>+=@{@-
let try_write_buf buf fd =
    let str = Buffer.contents buf in
    let sz = Unix.single_write fd str 0 (String.length str) in
    Buffer.clear buf ;
@}

We must requeue what was not written into the file descriptor. The stock stdlib
buffers are not very convenient for this kind of buffering, and should we care
about performance we'd have to rewrite this using a more to the point buffer
implementation.

@$@<WriteBuf@>+=@{@-
    Buffer.add_substring buf str sz (String.length str - sz)
@}

In the other direction, we always ask select to monitor the file descriptor
for input (@{infd@}) and append to our input buffer (@{inbuf@}) whatever can
be read from it ; then we try to read complete lines from this buffer and pass
each of them to the user provided callback function @{line_cb@}, signaling
enf of files with a special @{EndOfFile@} value.

Notice that on such occurrence we do *not* close the file since some users
might want to do something special in addition (for instance, the coprocess
controller will want to call @{Unix.close_process@}), but we do unregister the
handler (as we have performed the registration).

@$@<ReadBuf@>+=@{@-
type line = Line of string | EndOfFile

let try_read_line fd buf line_cb handler =
    (* Append what can be read from fd into buf ;
       notice that if more than 1500 bytes are available
       then the event loop will call us again at oince *)
    let str = String.create 1500 in
    let sz = Unix.read fd str 0 (String.length str) in
    if sz = 0 then (
        line_cb EndOfFile ;
        unregister handler
    ) else (
        Buffer.add_substring buf str 0 sz ;
        (* Beware that we may have 0, 1 or more lines in rbuf *)
        let rec try_next_line content ofs =
            try let eol = String.find_from content ofs "\n" in
                let eol, eolen =
                    if eol > 0 && content.[eol-1] = '\r' then
                        eol - 1, 2
                    else eol, 1 in
                let line = String.sub content ofs (eol - ofs) in
                line_cb (Line line) ;
                try_next_line content (eol+eolen)
            with Not_found -> ofs in
@}

Notice that @{String.find_from@} will raise Not_found if @{ofs@} points to the
end of the string (nul terminator is a valid position, @^h(e0) la C.

@$@<ReadBuf@>+=@{@-
        let content = Buffer.contents buf in
        Buffer.clear buf ;
        let ofs = try_next_line content 0 in
        Buffer.add_substring buf content ofs (String.length content - ofs) ;
    )
@}

We can make the @{BufferedIO@} module from the above functions:

@$@<BufferedIO@>==@{@-
module BufferedIO =
struct
    @<WriteBuf@>
    @<ReadBuf@>
    @<MakeBufferedIO@>
end
@}

@B@<A TCP Client@>

Now that this basic framework is in place, lets implement an @{Event.handler@}
for a basic TCP client. The only thing left to do is to build the file descriptor
to do buffered IO on (the same socket being used both for reading and writing).

So before building a proper event handler we need to know how to build a
connected socket from a hostname and a servicename (both strings):

@$@<TcpConnect@>==@{@-
let tcp_connect host service =
    let open Unix in
    getaddrinfo host service [AI_SOCKTYPE SOCK_STREAM ; AI_CANONNAME ] |>
    List.find_map (fun ai ->
        Log.debug "Trying to connect to %s:%s" ai.ai_canonname service ;
        try let sock = socket ai.ai_family ai.ai_socktype ai.ai_protocol in
            connect sock ai.ai_addr ;
            Some sock
        with exn ->
            Log.debug "Cannot connect: %s" (Printexc.to_string exn) ;
            None)
@}

While we are at it, closing might be useful:

@$@<TcpClose@>==@{@-
let tcp_close fd =
    Log.debug "Closing TCP connection" ;
    Unix.close fd
@}

Now given a line reading function, a host and service names, we can quite
simply return an @{event_handler@}:

@$@<TcpMake@>==@{@-
let start host service line_cb =
    try let fd = tcp_connect host service in
        let my_line_cb = function
            | BufferedIO.EndOfFile ->
                tcp_close fd
            | BufferedIO.Line str ->
                line_cb str
        in
        BufferedIO.start fd fd my_line_cb
    with Not_found ->
        failwith ("Cannot connect to "^ host ^":"^ service)
@}

We now have completed our small @{TcpClient@} event handler:

@$@<EventHandlerSamples@>+=@{@-
module TcpClient =
struct
    @<TcpConnect@>
    @<TcpClose@>
    @<TcpMake@>
end
@}

@B@<Coprocess@>

Given we don't really care about standard error for this simple scenario,
controlling a coprocess is even simpler than the TCP client. The function
below register an event handler from a command string and a line reader callback:

@$@<MakeCoprocess@>+=@{@-
module Coprocess =
struct
    let start cmd line_cb =
        Log.debug "running command '%s'" cmd ;
        let infd, outfd = Unix.open_process cmd in
        BufferedIO.(start
            (Unix.descr_of_in_channel infd)
            (Unix.descr_of_out_channel outfd)
            (function
                | Line str  -> line_cb str
                | EndOfFile ->
                    Log.debug "End of command '%s'" cmd ;
                    ignore (Unix.close_process (infd, outfd))))
end
@}

Which is a little too complex than necessary, due to the variety of types
available to represent mere file descriptors.

Notice that if we were not calling @{Unix.close_process@} to both close the
file descriptors *and* read the coprocess exit status, then a new zombie
process would stay around for each coprocess that our program would run!

@B@<Putting it all together@>

Packaging all this into an @{Event@} module:

@O@<event.ml@>==@{@-
open Batteries
@<EventHandler@>
@<SelectLoop@>
@<BufferedIO@>
@<EventHandlerSamples@>
@<MakeCoprocess@>
@}
