@! vim:sw=4 ts=4 sts=4 expandtab spell spelllang=en
@p maximum_input_line_length = 999999
@p maximum_output_line_length = 999999

@A@<The Plugin API@>

@B@<The IRC Service handler@>

Now let's think about what API would be nice for writing plug-ins with.

Basically, as a plug-in author, we want our bot to:

- connect using some nickname,
- join a preset list of channels
- react to some private message (or public message addressed to the nickname)

...where the reaction is, usually, to send a private or public message.

So ideally, a single function, given a nickname and a list of channels
will perform the two first steps and everything else is via a callback.
The RFC states:

"If a JOIN is successful, the user is then sent the channel's topic
(using RPL_TOPIC) and the list of users who are on the channel (using
RPL_NAMREPLY), which must include the user joining"

The join can thus populate some state with the list of the users present
on eqch channel (and keep this list updated as future notices are received).
The plug-in can then query this internal list at will.

Notice that, given this API, several plug-ins could share the same connection
but we want a nickname for each service so we must have a connection per
plug-in.

@$@<APIState@>+=@{@-
module StringSet = Set.Make (String)

type state = { channels : (string, channel_state) Hashtbl.t ;
          mutable write : string -> unit }
and channel_state = { topic : string ;
                      users : StringSet.t }

let make_empty_state () =
    { channels = Hashtbl.create 7 ;
      write = ignore }

let start ~servername ~servicename
          ~nick ?pass channels on_msg =
    let set_topic state chn topic =
        Hashtbl.modify_opt chn (function
            | None    -> Some { topic ; users = StringSet.empty }
            | Some st -> Some { st with topic })
            state.channels in
    let add_users state chn users =
        let users = List.fold_right StringSet.add users StringSet.empty in
        Hashtbl.modify_opt chn (function
            | None    -> Some { topic = "" ; users }
            | Some st -> Some { st with users = StringSet.union users st.users })
            state.channels in
    let msg_to_me =
        let open Str in
        let re = regexp ("^ *"^ quote nick ^" *: *\\(.*\\)$") in
        fun msg ->
            if string_match re msg 0 then
                true, matched_group 1 msg
            else
                false, msg
    in
    let state = make_empty_state () in
    let msg_reader = function
        | _, "376", _ ->
            Log.debug "Received END of MOTD -> send JOIN" ;
            Irc.join state.write channels
        | _, "332", [_ ; [chn]; [topic]] ->
            Log.debug "Received TOPIC for channel %s: %s" chn topic ;
            set_topic state chn topic
        | _, "331", _::[chn]::_  ->
            Log.debug "Received NOTOPIC for channel %s" chn ;
            set_topic state chn ""
        | _, "353", [_; _; [chn]; [nicks]] ->
            Log.debug "Received NAMREPLY for channel %s, nicks: %s" chn nicks ;
            add_users state chn (String.nsplit nicks " ")
        | src, "PRIVMSG", [dsts; [msg]] ->
            Log.debug "Received PRIVMSG: %s" msg ;
            let priv, msg = msg_to_me msg in
            let msg = String.trim msg in
            List.iter (fun dst ->
                let priv = priv || dst = nick in
                on_msg ~priv state src dst msg) dsts
        | _, cmd, _ ->
            Log.debug "Ignoring command %s" cmd in
    (* Build an event reader function from our IRC reader function *)
    let line_cb = Irc.line_reader_of_msg_reader msg_reader in
    (* Establish TCP connection *)
    let write = Event.TcpClient.start servername servicename line_cb in
    (* Save write function in state *)
    state.write <- write ;
    (* Write the Join (won't be sent until event loop is run *)
    Irc.login write ?pass nick
@}

We are now close to the real thing. The only part left is to choose how
to build a real program or library that we could later extend with
plug-ins.

@B@<Pluggable Architecture@>

We have several ways to achieve what we want:

- The traditional library: we could wrap all the code so far into a library
  that the plug-in author can use; the problem here is that every plug-in must
  implement its command line interface and we can't easily have a plug-in
  that's using another one (for instance, a mailbox service that's using an
  authentification service)

- The traditional plug-ins: we can provide a single program that load one or
  several plug-ins.

- The dynamic plug-ins: we write a mere program with a basic bot which only
  capability is to load other plug-ins (that will then connect to same server
  and join same channels with their own socket and nick).

This later architecture seams more fun for some reason ; perhaps because it's
tempting to be able to make a remote machine load some DLL and execute it
merely by ordering it to do so in an IRC channel (of course, this father of all
bot should take his orders from a given nick only, and should look for
libraries to load in a given directory only).

Of course, we can mix the two last method: by letting the user choose on the
command line which service it wants to load first, and defaulting to the
service that loads new ones, we have the best of both world.

Here is the code to load a library from a given directory in OCaml. First, the
library path which is a global ref on a string (so that you can easily change
it when parsing the command line, for instance):

@$@<CmdLineParams@>+=@{@-
let libdir = ref "."
@}

Then the code to load a library:

@$@<LoadingLib@>+=@{@-
exception InvalidName

let load_lib libname =
    if String.exists libname "/../" ||
       String.starts_with libname "../" then
        raise InvalidName ;
    let libname = !libdir ^"/"^ libname ^".cmo" in
    Log.debug "loading library %s" libname ;
    Dynlink.(loadfile (adapt_filename libname))
@}

The loaded library can do anything, but is expected to start a new service on
its own.

So let's code this first bot which service is to spawn new services
(of course this service will be started automatically otherwise we will have
kind of a chicken and egg problem). Remember that a service is actually defined
by it's @{on_msg@} callback. Most often than not, this callback will react
to some predefined regular expressions, so let's first implement a small helper
receiving a list of regexp and functions, and trying all regular expressions in
turn until one match. This is not unlike @{Arg.parse@}:

@$@<BotHelper@>==@{@-
let rec react_to_msg state msg = function
    | [] -> Log.debug "Ignoring msg '%s'" msg
    | (re, action)::rest ->
        if Str.string_match re msg 0 then action ()
        else react_to_msg state msg rest
@}

Using this helper the @{on_msg@} function of loader reduce to:

@$@<ServiceLoader@>+=@{@-
let on_msg_to_loader ~priv state _src dst msg =
    let open Str in
    if priv then Api.react_to_msg state msg [
        regexp "^help$", (fun () ->
            Irc.tell state.write [dst] "See my internals at https://github.com/rixed/hobbot") ;
        regexp "^load *\\(.*\\)$", (fun () ->
            let libname = matched_group 1 msg in
            let result = try load_lib libname ; "loaded"
                         with _ -> "fail" in
            Irc.tell state.write [dst] result) ]
@}

So we can regroup everything for the library into the @{api@} module:

@O@<api.ml@>==@{@-
open Batteries

@<CmdLineParams@>
@<APIState@>
@<LoadingLib@>
@<BotHelper@>
@}

and then everything for our loading service into a @{loader@} module,
that's going to be compiled as a module (cmo or cmxs) waiting for the
main program to load it:

@O@<loader.ml@>==@{@-
open Batteries
open Api

@<ServiceLoader@>

let init =
    start ~servername:!servername
          ~servicename:!servicename
          ~nick:(!nick ^"-loader")
          !channels on_msg_to_loader
@}

Notice that, since @{load_lib@} cannot pass anything to the loaded library
the we are forced to use some global symbols from the main program to
get servername and such. Again, these will be set from the command line
anyway. We could technically get rid of these parameters from @{start@}
arguments but I feel they belongs there.

@$@<CmdLineParams@>+=@{@-
let servername = ref "irc.freenode.org"
let servicename = ref "6667"
@}

Yes, there is a service named "irc", but no, IRC servers do not use it. IRC
is so acurately specified that even the port number is unreliable.

@$@<CmdLineParams@>+=@{@-
let nick = ref "hobbot"
let channels = ref ["#hobbot"]
@}

Notice as well that we must come with unique name for the various service
(both because the server and our remote users require it)

TODO: move these cmd line params into a proper module
